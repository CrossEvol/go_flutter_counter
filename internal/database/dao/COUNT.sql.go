// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: COUNT.sql

package dao

import (
	"context"
	"database/sql"
)

const DecrementCountValue = `-- name: DecrementCountValue :exec
UPDATE COUNT
SET
    value = value - 1 ,
    ` + "`" + `updated_at` + "`" + ` = CURRENT_TIMESTAMP
WHERE ` + "`" + `key` + "`" + ` = 'counter'
`

func (q *Queries) DecrementCountValue(ctx context.Context) error {
	_, err := q.exec(ctx, q.decrementCountValueStmt, DecrementCountValue)
	return err
}

const GetCountValue = `-- name: GetCountValue :one
SELECT value FROM COUNT WHERE ` + "`" + `key` + "`" + ` = 'counter' LIMIT 1
`

func (q *Queries) GetCountValue(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.getCountValueStmt, GetCountValue)
	var value int64
	err := row.Scan(&value)
	return value, err
}

const IncrementCountValue = `-- name: IncrementCountValue :exec
UPDATE COUNT
SET 
  value = value + 1 ,
  ` + "`" + `updated_at` + "`" + ` = CURRENT_TIMESTAMP
WHERE ` + "`" + `key` + "`" + ` = 'counter'
`

func (q *Queries) IncrementCountValue(ctx context.Context) error {
	_, err := q.exec(ctx, q.incrementCountValueStmt, IncrementCountValue)
	return err
}

const InitCountValue = `-- name: InitCountValue :execresult
INSERT INTO COUNT (
  ` + "`" + `key` + "`" + `,
  value,
  ` + "`" + `updated_at` + "`" + `
) VALUES (
 'counter',
  0 ,
  CURRENT_TIMESTAMP
)
`

func (q *Queries) InitCountValue(ctx context.Context) (sql.Result, error) {
	return q.exec(ctx, q.initCountValueStmt, InitCountValue)
}

const ResetCountValue = `-- name: ResetCountValue :exec
UPDATE COUNT
SET
    value = 0 ,
    ` + "`" + `updated_at` + "`" + ` = CURRENT_TIMESTAMP
WHERE ` + "`" + `key` + "`" + ` = 'counter'
`

func (q *Queries) ResetCountValue(ctx context.Context) error {
	_, err := q.exec(ctx, q.resetCountValueStmt, ResetCountValue)
	return err
}
