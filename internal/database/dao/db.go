// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package dao

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countCounterRecordsStmt, err = db.PrepareContext(ctx, CountCounterRecords); err != nil {
		return nil, fmt.Errorf("error preparing query CountCounterRecords: %w", err)
	}
	if q.createCounterRecordStmt, err = db.PrepareContext(ctx, CreateCounterRecord); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCounterRecord: %w", err)
	}
	if q.decrementCountValueStmt, err = db.PrepareContext(ctx, DecrementCountValue); err != nil {
		return nil, fmt.Errorf("error preparing query DecrementCountValue: %w", err)
	}
	if q.getCountValueStmt, err = db.PrepareContext(ctx, GetCountValue); err != nil {
		return nil, fmt.Errorf("error preparing query GetCountValue: %w", err)
	}
	if q.getCounterRecordsStmt, err = db.PrepareContext(ctx, GetCounterRecords); err != nil {
		return nil, fmt.Errorf("error preparing query GetCounterRecords: %w", err)
	}
	if q.incrementCountValueStmt, err = db.PrepareContext(ctx, IncrementCountValue); err != nil {
		return nil, fmt.Errorf("error preparing query IncrementCountValue: %w", err)
	}
	if q.initCountValueStmt, err = db.PrepareContext(ctx, InitCountValue); err != nil {
		return nil, fmt.Errorf("error preparing query InitCountValue: %w", err)
	}
	if q.resetCountValueStmt, err = db.PrepareContext(ctx, ResetCountValue); err != nil {
		return nil, fmt.Errorf("error preparing query ResetCountValue: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countCounterRecordsStmt != nil {
		if cerr := q.countCounterRecordsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countCounterRecordsStmt: %w", cerr)
		}
	}
	if q.createCounterRecordStmt != nil {
		if cerr := q.createCounterRecordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCounterRecordStmt: %w", cerr)
		}
	}
	if q.decrementCountValueStmt != nil {
		if cerr := q.decrementCountValueStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing decrementCountValueStmt: %w", cerr)
		}
	}
	if q.getCountValueStmt != nil {
		if cerr := q.getCountValueStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCountValueStmt: %w", cerr)
		}
	}
	if q.getCounterRecordsStmt != nil {
		if cerr := q.getCounterRecordsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCounterRecordsStmt: %w", cerr)
		}
	}
	if q.incrementCountValueStmt != nil {
		if cerr := q.incrementCountValueStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing incrementCountValueStmt: %w", cerr)
		}
	}
	if q.initCountValueStmt != nil {
		if cerr := q.initCountValueStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing initCountValueStmt: %w", cerr)
		}
	}
	if q.resetCountValueStmt != nil {
		if cerr := q.resetCountValueStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing resetCountValueStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                      DBTX
	tx                      *sql.Tx
	countCounterRecordsStmt *sql.Stmt
	createCounterRecordStmt *sql.Stmt
	decrementCountValueStmt *sql.Stmt
	getCountValueStmt       *sql.Stmt
	getCounterRecordsStmt   *sql.Stmt
	incrementCountValueStmt *sql.Stmt
	initCountValueStmt      *sql.Stmt
	resetCountValueStmt     *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                      tx,
		tx:                      tx,
		countCounterRecordsStmt: q.countCounterRecordsStmt,
		createCounterRecordStmt: q.createCounterRecordStmt,
		decrementCountValueStmt: q.decrementCountValueStmt,
		getCountValueStmt:       q.getCountValueStmt,
		getCounterRecordsStmt:   q.getCounterRecordsStmt,
		incrementCountValueStmt: q.incrementCountValueStmt,
		initCountValueStmt:      q.initCountValueStmt,
		resetCountValueStmt:     q.resetCountValueStmt,
	}
}
