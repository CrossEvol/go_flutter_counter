// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: COUNT_RECORD.sql

package dao

import (
	"context"
	"database/sql"
)

const CountCounterRecords = `-- name: CountCounterRecords :one
SELECT count(*) FROM COUNT_RECORD WHERE ` + "`" + `key` + "`" + ` = 'counter'
`

func (q *Queries) CountCounterRecords(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countCounterRecordsStmt, CountCounterRecords)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateCounterRecord = `-- name: CreateCounterRecord :execresult
INSERT INTO COUNT_RECORD (
  ` + "`" + `key` + "`" + `,
  old_value,
  new_value,
  ` + "`" + `created_at` + "`" + `
) VALUES (
  'counter',
  (SELECT value FROM COUNT WHERE ` + "`" + `key` + "`" + ` = 'counter' LIMIT 1) ,
  ? ,
  CURRENT_TIMESTAMP
)
`

func (q *Queries) CreateCounterRecord(ctx context.Context, newValue sql.NullInt64) (sql.Result, error) {
	return q.exec(ctx, q.createCounterRecordStmt, CreateCounterRecord, newValue)
}

const GetCounterRecords = `-- name: GetCounterRecords :many
SELECT id, "key", old_value, new_value, created_at FROM COUNT_RECORD WHERE ` + "`" + `key` + "`" + ` = 'counter'
`

func (q *Queries) GetCounterRecords(ctx context.Context) ([]COUNTRECORD, error) {
	rows, err := q.query(ctx, q.getCounterRecordsStmt, GetCounterRecords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []COUNTRECORD
	for rows.Next() {
		var i COUNTRECORD
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.OldValue,
			&i.NewValue,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
